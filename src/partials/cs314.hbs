<div class = "cs314">
<p></p>
<div style="text-align:center"><p> <img src = "cs314.jpg" width = "400" height = "230"></p></div>
<p>Me with the CS314 Professor, Mike Scott. P.S. He's really cool!</p>
<p><h2><p>CS314 (Data Structures) Projects:</p></h2></p>
<p></p>
<p>Code Camp (Assignment 1)</p>
<p></p>
<p>The goal of this project is to familiarize ourselves with coding in Java.
Since I claimed credit for Intro to CS 1, this class was a good warmup for what was
to come. We had to implement several different methods, such as:</p>
<p>Hamming Distance: Determine the Hamming Distance between two arrays.</p>
<p>Permutations: Determine if one array of ints is a permutation of another array</p>
<p>And more. This assignment was relaly fun and taught me coding standards required for the class.</p>
<p></p>
<p>MathMatrix (Assignment 2)</p>
<p></p>
<p>This assignment was centered around creating a class that creates a new MathMatrix object
and performs some of the main linear equations around matrices.</p>
<p></p>
<p>Baby Names (Assignment 3)</p>
<p></p>
<p>The assignment allowed users to query a data base of the top one thousand names in the last century in the US.
In addition, I learned to use various data types such as ArrayList and separate classes with arrays as the storage technique to store name data.</p>
<p></p>
<p>HangMan Manager (Assignment 4)</p>
<p>This assignment was a game that put off picking a word until as long as possible in an attempt to rig the game against the user.
 I utilized Maps (HashMaps and TreeMaps) to organize the data to prepare it to be chosen.</p>
<p></p>
<p>LinkedLists (Assignment 5)</p>
<p>The point of the assignment is to implement a doubly linked list. I utilized the given Node class and implemented a doubly linked list.</p>
<p></p>
<p>Recurstion (Assignment 6)</p>
<p></p>
<p>In this project, we had to use recursion to solve a variety of problems such as:</p>
<p>getBinary: Convert a base 10 integer to binary recursively.</p>
<p>sudokuSolver: Solve a sudoku board recursively.</p>
<p>canFlowOffMap: Determine if water at a given point can flow off the map (an array)</p>
<p></p>
<p>Anagrams (Assignment 7)</p>
<p></p>
<p>A recursive program that would take an input string and find various anagrams that were in the input dictionary file.</p>
<p></p>
<p>Sets (Assignment 8)</p>
<p></p>
<p>In this project, I had to implement three classes of Sets, AbstractSet, UnsortedSet, and SortedSet. I implemented MergeSort and used abstract classes.</p>
<p></p>
<p>Binary Search Tree (Assignment 9)</p>
<p></p>
<p>In this assignment, I had to implement a binary search tree class with all the methods such as insert, delete, and recursive insert and delete.</p>
<p></p>
<p>Huffman Coding (Assignment 10)</p>
<p></p>
<p>The hallmark assignment of the class. We had to write a compression algorithm that would compress files by sorting the commonality of characters in the file and then
 creating a special BST that wold create a new bit assignment for every character. We also had to write a decompressor that would
decompress the file we created. We would reconstruct the tree and perform tree traversals until we got the output file.</p>
<p></p>
<p>Graphs (Assignment 11)</p>
<p></p>
<p>We had to implement Djikstra's Algorithm on an undirected and directed graph to sort through NFL data and rank teams through
their win loss records. We constructed undirected and directed graphs and then implemented Djikstra's Algorithm to perform our own rankings.</p>



</div>
